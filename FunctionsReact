Syntax:
Type = tag name(h1 , p , div)

 <div id = "a"></div>
    <script>
        const b = React.createElement('h1',{id:'c'},"I am Hrushi")
        const e = document.getElementById('a')
        const root = ReactDOM.createRoot(e)
        root.render(b)
    </script>

JSX:
--JavaScript XML 
--It is a syntax extension for javascript
--jsx allows us to write HTML code in react js
--jsx all the html tags must be closed
--jsx compiles html code to js
--Babel is a tool in jsx

Ex:
--
 <div id="a"></div>
    <script type="text/babel">
        const element = <h1 className="aa">Welcome to XYZ IT sol.</h1>;
        const e = document.getElementById('a');
        const root = ReactDOM.createRoot(e);
        root.render(element);
    </script>
Ex:
--
<div id="root"></div>
        <script type="text/babel">
              const App=()=>{
                const isloggedin=false;
                return(
                    <div>
                        {isloggedin?(<h1> welcome User</h1>):(<h1>please login</h1>)}
                        {isloggedin&&<h1>you have a new notification</h1>}
                    </div>
                )
              }
              const root=ReactDOM.createRoot(document.getElementById('root'))
              root.render(<App/>)
        </script>

Functions:
---------
Using a function call:
---------------------
You can use a function call directly within the jsx expressions

<body>
    <div id="a"> </div>
    <script type="text/babel">
        function getGreeting(name){
            return `Hello ${name}! Welcome to React`
        }

        function Greeting(){
            const name = "Sunny";
            return <h1> {getGreeting(name)} </h1>; 
        }

        
        const root = ReactDOM.createRoot(document.getElementById('a'));
        root.render(<Greeting/>);
    </script>
</body>

